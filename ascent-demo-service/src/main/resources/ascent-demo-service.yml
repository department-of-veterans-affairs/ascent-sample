server:
  port: ${demo-service.server.port:8080}
info:  
  build:
    version:  "@project.version@"
    artifact: "@project.artifactId@"
    name: "@project.name@"
    description: "@project.description@"
    
# REDIS (RedisProperties)
redis:
  enabled: true
spring: 
  redis: 
    host: redis
    timeout: 0
    port: 6379  
    #password: 1qazse4
    pool:
      max-idle: 8  
      min-idle: 0    
      max-active: 8
      max-wait: -1
#Properties to customize Jackson ObjectMapper 
  jackson:
    serialization-inclusion: NON_EMPTY
    serialization:
      INDENT_OUTPUT: true
  cloud:
    bus:
      enabled: false
#Application Custom Properties          
ascent-demo-service:
  env: default
  propSource: internal
  password: secret
  sampleProperty: >
                  sampleProperty___env/profile:${ascent-demo-service.env}___propSource:
                  ${ascent-demo-service.propSource}__password:${ascent-demo-service.password}
#*********************************************************************
# BGS-Specific SERVICE CLIENT PROPERTIES
#*********************************************************************
---
spring.profiles: default, local-int, docker-demo, aws-ci, aws-dev
spring.profiles.include: remote_client_sims

---
spring.profiles: aws-stage, aws-prod
spring.profiles.include: remote_client_impls
---
#----------------------------------------
# BGS-Specific default properties
#----------------------------------------
bgs:
  url: http://localhost:58540/mockPersonWebServicePortBinding
  username: unitTestUsername
  password: unitTestPassword
  systemId: eBenefits
  vaApplicationName: eBenefits
  vaUCApplicationName: EBENEFITS
  stationId: 281
#---------------------------------------------------
#   PersonService SOAP web service client configuration
#---------------------------------------------------
wss-partner-person: 
  ws:
    client: 
      username: ${bgs.username}
      password: ${bgs.password}
      systemId: {bgs.systemId}
      vaApplicationName: ${bgs.vaApplicationName}
      stationId: ${bgs.stationId}
      endpoint: ${bgs.url}
      methodWarningThreshhold: 2500
      readTimeout: 360000
      connectionTimeout: 120000
#---------------------------------------------------
#   Logging Level for packages
#---------------------------------------------------
logging: 
  level:
    gov:
      va:
        ascent: INFO
    org: 
      springframework: 
        cloud.sleuth.log: INFO
        cloud.sleuth: INFO
        cloud.sleuth.instrument.web: INFO
        security: INFO
        ws: INFO
        cache: INFO
      apache:
        http: 
          impl.client: INFO
    net:
      sf:
        ehcache: INFO
management:
  security:
    enabled: false
#sanitize properties for keys when using /configprops.
endpoints:
  configprops:
    keys-to-sanitize: 'enabled, password'
hystrix:
  command:
    #Property configuration for hystrix command key to monitor async service method
    DemoServiceAsyncReadCommand: 
      execution:
        isolation:
          thread:
            # This property sets the time in milliseconds after which the caller will observe a timeout and 
            # walk away from the command execution. Hystrix marks the HystrixCommand as a TIMEOUT, and performs fallback 
            # logic. Note that there is configuration for turning off timeouts per-command, if that is desired (see command.timeout.enabled).
            # Default Value: 1000
            timeoutInMilliseconds: 6000
    default:
      metrics:
        rollingStats:
          # This property sets the duration of the statistical rolling window, in milliseconds. 
          # This is how long Hystrix keeps metrics for the circuit breaker to use and for publishing 
          # Default Value: 10000
          timeInMilliseconds: 20000
        # This property sets the time to wait, in milliseconds, between allowing health snapshots to be taken that calculate 
        # success and error percentages and affect circuit breaker status. 
        # Default Value: 500
        healthSnapshot: 
          intervalInMilliseconds: 1000
      circuitBreaker:
        # This property sets the amount of time, after tripping the circuit, to reject requests 
        # before allowing attempts again to determine if the circuit should again be closed.
        # Default Value: 5000
        sleepWindowInMilliseconds: 10000
        # This property sets the minimum number of requests in a rolling window that will trip the circuit.
        # Default Value: 20
        requestVolumeThreshold: 4
      execution:
        isolation:
          thread:
            # This property sets the time in milliseconds after which the caller will observe a timeout and 
            # walk away from the command execution. Hystrix marks the HystrixCommand as a TIMEOUT, and performs fallback 
            # logic. Note that there is configuration for turning off timeouts per-command, if that is desired (see command.timeout.enabled).
            # Default Value: 1000
            timeoutInMilliseconds: 5000

# Sleuth configuration     
# To skip specific patterns being exported, added few more customs on top of default skip pattern
# see org.springframework.cloud.sleuth.instrument.web.TraceFilter.DEFAULT_SKIP_PATTERN
spring.sleuth.web.skipPattern: (/api/.*/webjars.*|/api/.*/v2/api-docs.*|/api/.*/swagger-resources.*|/api/.*/swagger-ui.*|/api-docs.*|/autoconfig|/configprops|/dump|/health|/info|/metrics.*|/mappings|/trace|/swagger.*|.*\\.png|.*\\.css|.*\\.js|.*\\.html|/favicon.ico|/hystrix.stream)
#Property configuration to enable or disable JWT security for service calls 
ascent:
  security:
    jwt:
      enabled: false
      filter-process-url: /demo/v?/**